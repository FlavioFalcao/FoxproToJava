package translator;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;

parser code 
{:

	public Node root = null;

	public static parser getParser(String pPath) throws Exception {
		InputStream is = null;
		is = new FileInputStream(pPath);

		return new parser(new Yylex(is));
	}

	public Node getTree() throws Exception {
		if (root == null) {
			this.parse();
		}
		return root;
	}

	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}

:}

terminal IF, ELSE, ENDIF;
terminal GE, LE, GT, LT, UNEQ, EQUAL, ASSIGN;
terminal ADD, MINUS, MULTI, DIV;
terminal LC, RC, LPAR, RPAR;
terminal Integer INTCONST;
terminal Double RATIONAL;
terminal String IDE;

non terminal program;
non terminal if_else_statement;
non terminal if_statement;
non terminal assignment;
non terminal exas;
non terminal expr;

start with program;
program				::= if_statement:is			{: System.out.println("if_statement"); :}
						|if_else_statement:ies		{: System.out.println("if_else_statement"); :}
if_else_statement	::= IF expr:e1 exas:ea ELSE exas:ea ENDIF	{: System.out.println("if_else_statement2"); :}
if_statement 		::= IF expr:e1 exas:ea ENDIF	{: System.out.println("if_statement2"); :}
exas				::= expr:ex					{: System.out.println("exexpr"); :}
						|assignment:as				{: System.out.println("exassignment"); :}
						|exas:ex exas:ex				{: System.out.println("multiexas"); :}
assignment 			::= IDE:i ASSIGN expr:e1			{: System.out.println("assignment"); :}
expr 				::= expr:e1 EQUAL expr:e2			{: System.out.println("equal"); :}
						|expr:e1 GE expr:e2			{: System.out.println("ge"); :}
						|expr:e1 LE expr:e2			{: System.out.println("le"); :}
						|expr:e1 GT expr:e2			{: System.out.println("gt"); :}
						|expr:e1 LT expr:e2			{: System.out.println("lt"); :}
						|expr:e1 ADD expr:e2			{: System.out.println("+"); :}
						|expr:e1 MINUS expr:e2		{: System.out.println("-"); :}
						|expr:e1 MULTI expr:e2		{: System.out.println("*"); :}
						|expr:e1 DIV expr:e2			{: System.out.println("/"); :}
						|LPAR expr:e1 RPAR			{: System.out.println("(expr)"); :}
						|INTCONST:intconst				{: System.out.println("constant"); :}
						|RATIONAL:rational				{: System.out.println("rational"); :}